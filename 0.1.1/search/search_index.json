{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u00b6 \"O ye who believe! When ye deal with each other, in transactions involving future obligations in a fixed period of time, reduce them to writing.\" -- Holy Qur'an, 2:282 Confis (In Spanish, slang for trust and short for confianzas ) is a framework for writing and representing legal agreements. It includes its own language to write legal contracts and the ability to ask questions in order to allow parties to figure out their legal capabilities and responsibilities. It is meant to be a generalisation of a Ricardian Contract . Quick example \u00b6 Below is a simple license agreement where alice licenses some data to bob in exchange for a fee of \u00a3100, which must be paid sometime in the month of April 2022. Additionally, bob may not use the data for commercial purposes. License Example val alice by party val bob by party val payLicenseFeeTo by action ( \"Fee of \u00a3100\" ) val use by action ( \"Use as in deriving statistics from\" ) val share by action val data by thing // a plaintext clause that we do not wish to try to encode - \"\"\" The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. \"\"\" bob must payLicenseFeeTo ( alice ) underCircumstances { within { ( 1 of April )..( 30 of April ) year 2022 } } alice must share ( data ) asLongAs { after { bob did payLicenseFeeTo ( alice ) } } bob may use ( data ) asLongAs { after { bob did payLicenseFeeTo ( alice ) } } bob mayNot use ( data ) asLongAs { with purpose Commercial } This example of a license highlights the following: Defining Parties ( bob and alice ) Defining Actions the Parties can make (here use , share , and payLicenseFeeTo ) Defining Things that Actions can be performed on ( data ). Permissions , which allow limiting the space within which parties are allowed to operate. If a party does not operate within this space, we can say they are non-compliant . Requirements , which allow adding further constraints to what a party must do in order to remain compliant .","title":"About"},{"location":"#about","text":"\"O ye who believe! When ye deal with each other, in transactions involving future obligations in a fixed period of time, reduce them to writing.\" -- Holy Qur'an, 2:282 Confis (In Spanish, slang for trust and short for confianzas ) is a framework for writing and representing legal agreements. It includes its own language to write legal contracts and the ability to ask questions in order to allow parties to figure out their legal capabilities and responsibilities. It is meant to be a generalisation of a Ricardian Contract .","title":"About"},{"location":"#quick-example","text":"Below is a simple license agreement where alice licenses some data to bob in exchange for a fee of \u00a3100, which must be paid sometime in the month of April 2022. Additionally, bob may not use the data for commercial purposes. License Example val alice by party val bob by party val payLicenseFeeTo by action ( \"Fee of \u00a3100\" ) val use by action ( \"Use as in deriving statistics from\" ) val share by action val data by thing // a plaintext clause that we do not wish to try to encode - \"\"\" The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. \"\"\" bob must payLicenseFeeTo ( alice ) underCircumstances { within { ( 1 of April )..( 30 of April ) year 2022 } } alice must share ( data ) asLongAs { after { bob did payLicenseFeeTo ( alice ) } } bob may use ( data ) asLongAs { after { bob did payLicenseFeeTo ( alice ) } } bob mayNot use ( data ) asLongAs { with purpose Commercial } This example of a license highlights the following: Defining Parties ( bob and alice ) Defining Actions the Parties can make (here use , share , and payLicenseFeeTo ) Defining Things that Actions can be performed on ( data ). Permissions , which allow limiting the space within which parties are allowed to operate. If a party does not operate within this space, we can say they are non-compliant . Requirements , which allow adding further constraints to what a party must do in order to remain compliant .","title":"Quick example"},{"location":"AgreementsAsDocuments/","text":"Agreements As Documents \u00b6 Agreements written as Confis code can be converted into markdown , which can easily be converted to a PDF or a simple web page. Take the following example: example.confis.kts as Document Confis Agreement \u00b6 1 - Parties \u00b6 Alice Liddell of Imperial College ( Alice ). Bob the Builder ( Bob ). 2 - Definitions \u00b6 \"the Data\" : Confidential non-anonymised customer data. \"pay\" . \"send\" : Email file to company inbox. 3 - Terms \u00b6 Alice must pay Bob: from 01/06/2022 to 07/06/2022 inclusive Bob must send the Data: only after Alice did pay Bob from 07/06/2022 to 14/06/2022 inclusive Alice may not pay Bob under the following circumstances: only after Alice did pay Bob The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. Which corresponds to the following Confis code: example.confis.kts val alice by party ( named = \"Alice\" , description = \"Alice Liddell of Imperial College\" ) val bob by party ( named = \"Bob\" , description = \"Bob the Builder\" ) val pay by action val data by thing ( named = \"the Data\" , description = \"Confidential non-anonymised customer data\" ) val send by action ( description = \"Email file to company inbox\" ) // a plaintext clause that we do not wish to try to encode - \"\"\" The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. \"\"\" alice must pay ( bob ) underCircumstances { within { ( 1 of June )..( 7 of June ) year 2022 } } alice mayNot pay ( bob ) asLongAs { after { alice did pay ( bob ) } } bob must send ( data ) underCircumstances { after { alice did pay ( bob ) } within { ( 7 of June )..( 14 of June ) year 2022 } }","title":"Agreements As Documents"},{"location":"AgreementsAsDocuments/#agreements-as-documents","text":"Agreements written as Confis code can be converted into markdown , which can easily be converted to a PDF or a simple web page. Take the following example: example.confis.kts as Document","title":"Agreements As Documents"},{"location":"AgreementsAsDocuments/#confis-agreement","text":"","title":"Confis Agreement"},{"location":"AgreementsAsDocuments/#1-parties","text":"Alice Liddell of Imperial College ( Alice ). Bob the Builder ( Bob ).","title":"1 - Parties"},{"location":"AgreementsAsDocuments/#2-definitions","text":"\"the Data\" : Confidential non-anonymised customer data. \"pay\" . \"send\" : Email file to company inbox.","title":"2 - Definitions"},{"location":"AgreementsAsDocuments/#3-terms","text":"Alice must pay Bob: from 01/06/2022 to 07/06/2022 inclusive Bob must send the Data: only after Alice did pay Bob from 07/06/2022 to 14/06/2022 inclusive Alice may not pay Bob under the following circumstances: only after Alice did pay Bob The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. Which corresponds to the following Confis code: example.confis.kts val alice by party ( named = \"Alice\" , description = \"Alice Liddell of Imperial College\" ) val bob by party ( named = \"Bob\" , description = \"Bob the Builder\" ) val pay by action val data by thing ( named = \"the Data\" , description = \"Confidential non-anonymised customer data\" ) val send by action ( description = \"Email file to company inbox\" ) // a plaintext clause that we do not wish to try to encode - \"\"\" The Licence and the terms and conditions thereof shall be governed and construed in accordance with the law of England and Wales. \"\"\" alice must pay ( bob ) underCircumstances { within { ( 1 of June )..( 7 of June ) year 2022 } } alice mayNot pay ( bob ) asLongAs { after { alice did pay ( bob ) } } bob must send ( data ) underCircumstances { after { alice did pay ( bob ) } within { ( 7 of June )..( 14 of June ) year 2022 } }","title":"3 - Terms"},{"location":"IDE%20Support/CompilationCaching/","text":"Compilation Caching \u00b6 In order to speed up intelligent editing and rendering Document previews in the plugin, scripts are cached in the filesystem and in memory. By default, the cache is in your operating system's temporary directory (aka, /tmp in Linux) if set through the JVM proeprty java.io.tmpdir . In order to choose where scripts are cached, you can set the environment variable COMPILED_CONFIS_SCRIPTS_CACHE_DIR . To disable caching entirely, you can set COMPILED_CONFIS_SCRIPTS_CACHE_DIR to an empty string \"\" .","title":"Compilation Caching"},{"location":"IDE%20Support/CompilationCaching/#compilation-caching","text":"In order to speed up intelligent editing and rendering Document previews in the plugin, scripts are cached in the filesystem and in memory. By default, the cache is in your operating system's temporary directory (aka, /tmp in Linux) if set through the JVM proeprty java.io.tmpdir . In order to choose where scripts are cached, you can set the environment variable COMPILED_CONFIS_SCRIPTS_CACHE_DIR . To disable caching entirely, you can set COMPILED_CONFIS_SCRIPTS_CACHE_DIR to an empty string \"\" .","title":"Compilation Caching"},{"location":"IDE%20Support/IDEAPlugin/","text":"IDEA Plugin \u00b6 If you wish to write contracts in your computer directly, you can get syntax highlighting support inside IntelliJ IDEA thanks to the Confis IDEA plugin. Intelligent Editing \u00b6 The plugin brings the usual commodities of developing inside an IDE, like syntax highlighting, reporting of errors in-the-fly, and autocompletion for contract syntax ( unless , asLongAs ) and for contract variables (circumstances, parties, and action names, for example) Confis Document Previews \u00b6 Confis code can be converted to a better-looking Document . The Document that results from the contract you are writing can be previewed by the Confis Editor provided by the plugin:","title":"IDEA Plugin"},{"location":"IDE%20Support/IDEAPlugin/#idea-plugin","text":"If you wish to write contracts in your computer directly, you can get syntax highlighting support inside IntelliJ IDEA thanks to the Confis IDEA plugin.","title":"IDEA Plugin"},{"location":"IDE%20Support/IDEAPlugin/#intelligent-editing","text":"The plugin brings the usual commodities of developing inside an IDE, like syntax highlighting, reporting of errors in-the-fly, and autocompletion for contract syntax ( unless , asLongAs ) and for contract variables (circumstances, parties, and action names, for example)","title":"Intelligent Editing"},{"location":"IDE%20Support/IDEAPlugin/#confis-document-previews","text":"Confis code can be converted to a better-looking Document . The Document that results from the contract you are writing can be previewed by the Confis Editor provided by the plugin:","title":"Confis Document Previews"},{"location":"IDE%20Support/NativeKotlin/","text":"IDEA Kotlin Scripting Native Support \u00b6 IntelliJ IDEA is able to provided scripting support without a plugin by adding a compiled Confis scripting JAR to the classpath and then reloading the gradle project. Support is on par with the IDEA plugin .","title":"IDEA Kotlin Scripting Native Support"},{"location":"IDE%20Support/NativeKotlin/#idea-kotlin-scripting-native-support","text":"IntelliJ IDEA is able to provided scripting support without a plugin by adding a compiled Confis scripting JAR to the classpath and then reloading the gradle project. Support is on par with the IDEA plugin .","title":"IDEA Kotlin Scripting Native Support"},{"location":"Language/Circumstances/","text":"Circumstances \u00b6 Circumstances allow narrowing down when exactly a clause applies. For where cirucmstances can be used, take a look at the different types of clauses, such as Permission and Requirement clauses. Circumstance Types \u00b6 There are several types of circumstances: Time Periods \u00b6 Meant to restrict a clause to acting within a specific time period. For example: alice may { see ( data ) } asLongAs { within { ( 1 of May year 2021 )..( 1 of June year 2023 ) } } ...states that alice is Allowed to see the data , under the circumstance of doing it within 01/05/2021 and 01/06/2023, inclusive. Formats \u00b6 There are several ways of writing time periods and dates in general. All the following are valid: Inline Dates as variables Dates within same year alice may { see ( data ) } asLongAs { within { ( 1 of May year 2021 )..( 1 of June year 2023 ) } } val startOfContract = 1 of May year 2021 val endOfContract = 1 of June year 2023 alice may { see ( data ) } asLongAs { within { startOfContract .. endOfContract } } alice may { see ( data ) } asLongAs { within { ( 1 of May )..( 1 of June ) year 2022 } } Past Actions \u00b6 A past action is a circumstance where we declare something to have already happened in the past. They are the best way of saying \"X if Y happened\" . To write a past action circumstance, you require a sentence , which you obtain from declaring parties, actions, and things: val alice by party val see by action val data by thing val pay by action val bob by party alice may { see ( data ) } asLongAs { after { alice did pay ( bob ) } } Purpose \u00b6 Meant to restrict a clause to acting with a specific purpose. For example: alice may { see ( data ) } asLongAs { with purpose Research } ...states that alice is Allowed to see the data , under the circumstance of having Research purposes. If the circumstance is not Research , then the answer to 'May Alice see the data?' will be Unspecified . See Clauses for more details. Consent \u00b6 It is a common case in legal agreement to have a legal capability, but subject to consent from some party that is taking part of the agreement. Confis allows writing this through Consent circumstances. To write a consent circumstance, you only require a defined party : val bob by party alice may { see ( data ) } asLongAs { with consentFrom bob } Mixing Circumstances \u00b6 To write specific cases, you can mix different circumstances in the same clause to create very specific scenarios. For example: Alice may only see the data for the duration of the contract, after paying bob, and with Research purposes val alice by party val see by action val data by thing val pay by action val bob by party val startOfContract = 1 of May year 2021 val endOfContract = 1 of June year 2023 alice may { see ( data ) } asLongAs { within { startOfContract .. endOfContract } after { alice did pay ( bob ) } with purpose Research }","title":"Circumstances"},{"location":"Language/Circumstances/#circumstances","text":"Circumstances allow narrowing down when exactly a clause applies. For where cirucmstances can be used, take a look at the different types of clauses, such as Permission and Requirement clauses.","title":"Circumstances"},{"location":"Language/Circumstances/#circumstance-types","text":"There are several types of circumstances:","title":"Circumstance Types"},{"location":"Language/Circumstances/#time-periods","text":"Meant to restrict a clause to acting within a specific time period. For example: alice may { see ( data ) } asLongAs { within { ( 1 of May year 2021 )..( 1 of June year 2023 ) } } ...states that alice is Allowed to see the data , under the circumstance of doing it within 01/05/2021 and 01/06/2023, inclusive.","title":"Time Periods"},{"location":"Language/Circumstances/#formats","text":"There are several ways of writing time periods and dates in general. All the following are valid: Inline Dates as variables Dates within same year alice may { see ( data ) } asLongAs { within { ( 1 of May year 2021 )..( 1 of June year 2023 ) } } val startOfContract = 1 of May year 2021 val endOfContract = 1 of June year 2023 alice may { see ( data ) } asLongAs { within { startOfContract .. endOfContract } } alice may { see ( data ) } asLongAs { within { ( 1 of May )..( 1 of June ) year 2022 } }","title":"Formats"},{"location":"Language/Circumstances/#past-actions","text":"A past action is a circumstance where we declare something to have already happened in the past. They are the best way of saying \"X if Y happened\" . To write a past action circumstance, you require a sentence , which you obtain from declaring parties, actions, and things: val alice by party val see by action val data by thing val pay by action val bob by party alice may { see ( data ) } asLongAs { after { alice did pay ( bob ) } }","title":"Past Actions"},{"location":"Language/Circumstances/#purpose","text":"Meant to restrict a clause to acting with a specific purpose. For example: alice may { see ( data ) } asLongAs { with purpose Research } ...states that alice is Allowed to see the data , under the circumstance of having Research purposes. If the circumstance is not Research , then the answer to 'May Alice see the data?' will be Unspecified . See Clauses for more details.","title":"Purpose"},{"location":"Language/Circumstances/#consent","text":"It is a common case in legal agreement to have a legal capability, but subject to consent from some party that is taking part of the agreement. Confis allows writing this through Consent circumstances. To write a consent circumstance, you only require a defined party : val bob by party alice may { see ( data ) } asLongAs { with consentFrom bob }","title":"Consent"},{"location":"Language/Circumstances/#mixing-circumstances","text":"To write specific cases, you can mix different circumstances in the same clause to create very specific scenarios. For example: Alice may only see the data for the duration of the contract, after paying bob, and with Research purposes val alice by party val see by action val data by thing val pay by action val bob by party val startOfContract = 1 of May year 2021 val endOfContract = 1 of June year 2023 alice may { see ( data ) } asLongAs { within { startOfContract .. endOfContract } after { alice did pay ( bob ) } with purpose Research }","title":"Mixing Circumstances"},{"location":"Language/Declarations/","text":"Parties, Things, and Actions \u00b6 Much like real-life agreements have an appendix or a preface defining the terms used in the rest of the documents, Confis agreements require declaring Parties (usually legal persons, real people, or groups of real people), Actions (stuff Parties can or cannot do), and Things (stuff the Actions can be performed on). Parties \u00b6 A Party is a participant in the agreement. It is up to the author to decide what a party 'can be', but in general they are a legal person , or perhaps a group of them (say, a team within a company). Parties have names and can be named after the name of the variable ( alice , in first example below), or the can be given full names and descriptions. Simple name Party Named Party Named Party with description val alice by party val alice by party ( named = \"Alice Liddell\" ) val alice by party ( named = \"Alice Liddell\" , description = \"born 4 May 1852 in Westminster, London\" , ) Actions \u00b6 Actions constitute what a party can or cannot do. They can be performed on other Parties, or on Things. They can also have simple names, full names, and descriptions. Simple name Action Named Action Named Action with description val shareDataWith by action val shareDataWith by action ( named = \"Sharing the dataset relating to customer data\" ) val shareDataWith by action ( named = \"Sharing the dataset relating to customer data\" , description = \"as in copy and redistribute copies of the dataset\" , ) Things \u00b6 Things are what Actions are performed on. They can also carry descriptions and names: Simple name Thing Named Thing Named Thing with description val licensingFee by thing val licensingFee by thing ( named = \"10\u20ac licensing fee\" ) val licensingFee by thing ( named = \"Licensing fee for customer data\" , description = \"10\u20ac in cash\" ) Sentences \u00b6 Parties, things, and actions together are used to form sentences, such as in Permission Clauses : val alice by party val eat by action val cake by thing alice may eat ( cake ) val bob by party val pay by action alice may pay ( bob ) You also need to make sentences for Requirement Clauses and Past Action Circumstances","title":"Parties, Things, and Actions"},{"location":"Language/Declarations/#parties-things-and-actions","text":"Much like real-life agreements have an appendix or a preface defining the terms used in the rest of the documents, Confis agreements require declaring Parties (usually legal persons, real people, or groups of real people), Actions (stuff Parties can or cannot do), and Things (stuff the Actions can be performed on).","title":"Parties, Things, and Actions"},{"location":"Language/Declarations/#parties","text":"A Party is a participant in the agreement. It is up to the author to decide what a party 'can be', but in general they are a legal person , or perhaps a group of them (say, a team within a company). Parties have names and can be named after the name of the variable ( alice , in first example below), or the can be given full names and descriptions. Simple name Party Named Party Named Party with description val alice by party val alice by party ( named = \"Alice Liddell\" ) val alice by party ( named = \"Alice Liddell\" , description = \"born 4 May 1852 in Westminster, London\" , )","title":"Parties"},{"location":"Language/Declarations/#actions","text":"Actions constitute what a party can or cannot do. They can be performed on other Parties, or on Things. They can also have simple names, full names, and descriptions. Simple name Action Named Action Named Action with description val shareDataWith by action val shareDataWith by action ( named = \"Sharing the dataset relating to customer data\" ) val shareDataWith by action ( named = \"Sharing the dataset relating to customer data\" , description = \"as in copy and redistribute copies of the dataset\" , )","title":"Actions"},{"location":"Language/Declarations/#things","text":"Things are what Actions are performed on. They can also carry descriptions and names: Simple name Thing Named Thing Named Thing with description val licensingFee by thing val licensingFee by thing ( named = \"10\u20ac licensing fee\" ) val licensingFee by thing ( named = \"Licensing fee for customer data\" , description = \"10\u20ac in cash\" )","title":"Things"},{"location":"Language/Declarations/#sentences","text":"Parties, things, and actions together are used to form sentences, such as in Permission Clauses : val alice by party val eat by action val cake by thing alice may eat ( cake ) val bob by party val pay by action alice may pay ( bob ) You also need to make sentences for Requirement Clauses and Past Action Circumstances","title":"Sentences"},{"location":"Language/PermissionClauses/","text":"Permission Clauses \u00b6 It is common in legal agreement to restrict the things a party is (or is not) allowed to do. In order to specify these, Confis uses Permission clauses , which combine may or mayNot with some circumstances, optionally specified by asLongAs or unless . We can say a party is compliant (as far as permission clauses go) with the agreement when they only do the things they have permission to do . For more ways to define compliance, see Requirement Clauses . A typical requirement clause looks as follows: // specifies that alice may only pay bob during the first week of June and with // research purposes alice may { pay ( bob ) } asLongAs { with purpose Research within { ( 1 of June )..( 7 of June ) year 2022 } } Syntax \u00b6 Permission clauses have the following grammar: subject may / mayNot action ( thing ) // or subject may / mayNot action ( thing ) unless / asLongAs { circumstance1 ... circumstanceN } Semantics \u00b6 Permission has the following semantics: There are 4 possible results to a \"Can this happen\" question: Allow , Forbid , Unspecified ( the agreement just does not say) or Depends (circumstances are too general for a specific answer) The combination of existing clauses will determine the answer to a \"Can this happen\" question. In particular, more a result that would come out as Unspecified , more specific clauses can be used to further narrow down the result. Clause Circumstance C Action A may A asLongAs C True Allowed False Unspecified may A unless C True Unspecified False Allowed mayNot A asLongAs C True Forbidden False Unspecified mayNot A unless C True Unspecified False Forbidden The idea is to follow a 'least surprise' principle, meaning that the contract allows and forbids exactly as it reads. For example, 'Alice may share data unless with commercial purpose ' means that Alice is allowed share the data in general, but is not necessarily forbidden from sharing it with commercial purpose - she is just not explicitly allowed from doing so. If we wish to stop alice from sharing data with commercial purpose, we also need the following sentence 'Alice may not share data as long as with commercial purpose '. We need both of these sentences to specify, in english, that 'Alice is allowed to share data in general but is forbidden from doing so with commercial purposes'. This encourages contract authors to be very specific concerning the behaviour they wish to describe, and allows contract readers to not need to make assumptions. Examples \u00b6 Sentence Purpose Alice eat cake? Alice may eatCake unless with purpose Commercial Research Allowed Commercial Unspecified no purpose specified Depends Alice mayNot eatCake asLongAs with purpose Commercial Research Unspecified Commercial Forbidden no purpose specified Depends Examples \u00b6 Alice has permission to pay Bob in May 2022 and only in May 2022 \u00b6 In this example, it is not enough to allow Alice to pay in May, we also want to forbid her from paying Bob some other time. Therefore, we need both a ' may ... asLongAs' clause and a 'mayNot ... unless' clause. val alice by party val bob by party val pay by action val may = ( 1 of May year 2022 )..( 30 of May year 2022 ) alice may { pay ( bob ) } asLongAs { within { may } } alice mayNot { pay ( bob ) } unless { within { may } }","title":"Permission Clauses"},{"location":"Language/PermissionClauses/#permission-clauses","text":"It is common in legal agreement to restrict the things a party is (or is not) allowed to do. In order to specify these, Confis uses Permission clauses , which combine may or mayNot with some circumstances, optionally specified by asLongAs or unless . We can say a party is compliant (as far as permission clauses go) with the agreement when they only do the things they have permission to do . For more ways to define compliance, see Requirement Clauses . A typical requirement clause looks as follows: // specifies that alice may only pay bob during the first week of June and with // research purposes alice may { pay ( bob ) } asLongAs { with purpose Research within { ( 1 of June )..( 7 of June ) year 2022 } }","title":"Permission Clauses"},{"location":"Language/PermissionClauses/#syntax","text":"Permission clauses have the following grammar: subject may / mayNot action ( thing ) // or subject may / mayNot action ( thing ) unless / asLongAs { circumstance1 ... circumstanceN }","title":"Syntax"},{"location":"Language/PermissionClauses/#semantics","text":"Permission has the following semantics: There are 4 possible results to a \"Can this happen\" question: Allow , Forbid , Unspecified ( the agreement just does not say) or Depends (circumstances are too general for a specific answer) The combination of existing clauses will determine the answer to a \"Can this happen\" question. In particular, more a result that would come out as Unspecified , more specific clauses can be used to further narrow down the result. Clause Circumstance C Action A may A asLongAs C True Allowed False Unspecified may A unless C True Unspecified False Allowed mayNot A asLongAs C True Forbidden False Unspecified mayNot A unless C True Unspecified False Forbidden The idea is to follow a 'least surprise' principle, meaning that the contract allows and forbids exactly as it reads. For example, 'Alice may share data unless with commercial purpose ' means that Alice is allowed share the data in general, but is not necessarily forbidden from sharing it with commercial purpose - she is just not explicitly allowed from doing so. If we wish to stop alice from sharing data with commercial purpose, we also need the following sentence 'Alice may not share data as long as with commercial purpose '. We need both of these sentences to specify, in english, that 'Alice is allowed to share data in general but is forbidden from doing so with commercial purposes'. This encourages contract authors to be very specific concerning the behaviour they wish to describe, and allows contract readers to not need to make assumptions.","title":"Semantics"},{"location":"Language/PermissionClauses/#examples","text":"Sentence Purpose Alice eat cake? Alice may eatCake unless with purpose Commercial Research Allowed Commercial Unspecified no purpose specified Depends Alice mayNot eatCake asLongAs with purpose Commercial Research Unspecified Commercial Forbidden no purpose specified Depends","title":"Examples"},{"location":"Language/PermissionClauses/#examples_1","text":"","title":"Examples"},{"location":"Language/PermissionClauses/#alice-has-permission-to-pay-bob-in-may-2022-and-only-in-may-2022","text":"In this example, it is not enough to allow Alice to pay in May, we also want to forbid her from paying Bob some other time. Therefore, we need both a ' may ... asLongAs' clause and a 'mayNot ... unless' clause. val alice by party val bob by party val pay by action val may = ( 1 of May year 2022 )..( 30 of May year 2022 ) alice may { pay ( bob ) } asLongAs { within { may } } alice mayNot { pay ( bob ) } unless { within { may } }","title":"Alice has permission to pay Bob in May 2022 and only in May 2022"},{"location":"Language/RequirementClauses/","text":"Requirement Clauses \u00b6 Permission allows to specify what parties are allowed to do, and as long as no one does something they are not allowed to do, we can say they are compliant with the contract Requirement clauses allow to further add conditions for compliance. In order to be compliant, parties now need to 1. Only do things they are allowed to do 2. Do the things they are required to do A requirement can be written as follows: // specifies that bob must pay alice in the first week of June bob must pay ( alice ) underCircumstances { within { ( 1 of June )..( 7 of June ) year 2022 } } Syntax \u00b6 Requirement clauses have the following grammar: subject must action ( thing ) //or subject must action ( thing ) underCircumstances { circumstance1 ... circumstanceN }","title":"Requirement Clauses"},{"location":"Language/RequirementClauses/#requirement-clauses","text":"Permission allows to specify what parties are allowed to do, and as long as no one does something they are not allowed to do, we can say they are compliant with the contract Requirement clauses allow to further add conditions for compliance. In order to be compliant, parties now need to 1. Only do things they are allowed to do 2. Do the things they are required to do A requirement can be written as follows: // specifies that bob must pay alice in the first week of June bob must pay ( alice ) underCircumstances { within { ( 1 of June )..( 7 of June ) year 2022 } }","title":"Requirement Clauses"},{"location":"Language/RequirementClauses/#syntax","text":"Requirement clauses have the following grammar: subject must action ( thing ) //or subject must action ( thing ) underCircumstances { circumstance1 ... circumstanceN }","title":"Syntax"}]}